###########
# BUILDER #
###########

# pull official base image
FROM python:3.8-alpine as builder

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# check for updates
RUN apk update && apk upgrade

# install psycopg2 dependencies
RUN apk add --no-cache postgresql-dev gcc python3-dev musl-dev

# install cffi dependencies
RUN apk add --no-cache openssl-dev libffi-dev

# install pillow dependencies
RUN apk add --no-cache jpeg-dev zlib-dev

# install pygraphviz dependencies
RUN apk add --no-cache graphviz graphviz-dev

# install brotli dependencies
RUN apk add --no-cache g++

# install uvicorn dependencies
RUN apk add --no-cache make

# install project dependencies
RUN pip install --upgrade setuptools
RUN pip install --upgrade virtualenv
RUN pip install pipenv
COPY ./Pipfile* /usr/src/app/
RUN pipenv lock -r > requirements.txt
# Pipenv insist on creating a virtualenv lets delete it.
RUN pipenv --rm
# It's recommended to use pip to install dependancies on docker containers.
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

#########
# FINAL #
#########

# pull official base image
FROM python:3.8-alpine

# Update
RUN apk update && apk upgrade

# install pillow dependencies
RUN apk add --no-cache libjpeg-turbo

# install psycopg2 dependencies
RUN apk add --no-cache libpq

# create directory for the app user
RUN mkdir -p /home/app
RUN mkdir -p /var/lib/codeshepherds/data

# create the app user
RUN addgroup -S app && adduser -S app -G app

# chown all the files to the app user
RUN chown app:app -R /home/app
RUN chown app:app -R /var/lib/codeshepherds/data

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir -p $APP_HOME
RUN mkdir -p $APP_HOME/static
RUN mkdir -p $APP_HOME/media
WORKDIR $APP_HOME

# install project dependencies
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --no-cache /wheels/*

# copy shell scripts
COPY ./env_secrets_expand.sh $APP_HOME
COPY ./entrypoint.sh $APP_HOME

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.prod.sh
ENTRYPOINT ["/home/app/web/entrypoint.sh"]
